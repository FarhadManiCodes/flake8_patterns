# .pre-commit-config.yaml
---
repos:
  # Basic file hygiene
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: trailing-whitespace
      - id: end-of-file-fixer
      - id: check-yaml
      - id: check-toml
      - id: check-merge-conflict
      - id: check-added-large-files
        args: ['--maxkb=500']  # Prevent files larger than 500KB
      - id: debug-statements
      - id: name-tests-test
        args: ["--pytest-test-first"]
        exclude: ^tests/rule_analysis/

  # Python code formatting
  - repo: https://github.com/psf/black
    rev: 25.1.0
    hooks:
      - id: black
        args: [--line-length=88]

  # Import sorting (compatible with black)
  - repo: https://github.com/pycqa/isort
    rev: 6.0.1
    hooks:
      - id: isort
        args: [--profile, black, --line-length=88]

  # Modern Python syntax upgrades
  - repo: https://github.com/asottile/pyupgrade
    rev: v3.20.0
    hooks:
      - id: pyupgrade
        args: [--py311-plus]

  # Fast linting with Ruff (replaces many tools)
  - repo: https://github.com/astral-sh/ruff-pre-commit
    rev: v0.12.2
    hooks:
      - id: ruff
        args: [--fix, --exit-non-zero-on-fix]
        # Focus on important rules for a linting plugin
        files: ^(src/|tests/).*\.py$

  # Type checking with mypy
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.16.1
    hooks:
      - id: mypy
        additional_dependencies: [typing_extensions]
        args: [--strict, --show-error-codes, --no-namespace-packages]
        # Only check source code, not tests (tests can be less strict)
        files: ^src/flake8_patterns/.*\.py$

  # Security scanning
  - repo: https://github.com/PyCQA/bandit
    rev: 1.8.5
    hooks:
      - id: bandit
        args: [--skip, B101]
        files: ^src/flake8_patterns/.*\.py$

  # Test our own flake8 plugin (local hook)
  - repo: local
    hooks:
      - id: test-plugin-import
        name: "Test plugin imports correctly"
        entry: python -c "import sys; sys.path.insert(0, 'src'); from flake8_patterns.checker import PatternChecker; print('✅ Plugin imports successfully')"
        language: python
        pass_filenames: false
        files: ^src/flake8_patterns/.*\.py$

      - id: run-our-plugin
        name: "Test our plugin on examples"
        entry: bash -c "
          if [ -f examples/bad_patterns.py ]; then
            python -m flake8 --select=EFP examples/bad_patterns.py || echo '✅ Plugin detected issues as expected';
          else
            echo '⚠️ No examples/bad_patterns.py found, skipping plugin test';
          fi
          "
        language: system
        pass_filenames: false
        files: ^(src/flake8_patterns/|examples/).*\.py$

  # Check for common issues in setup files
  - repo: https://github.com/asottile/setup-cfg-fmt
    rev: v2.8.0
    hooks:
      - id: setup-cfg-fmt
        files: ^setup\.cfg$

  - repo: https://github.com/abravalheri/validate-pyproject
    rev: v0.24.1
    hooks:
      - id: validate-pyproject

# Global configuration
default_language_version:
  python: python3

# Only run on commit (not push) for faster workflow
default_stages: [pre-commit]

# Don't fail fast - run all hooks even if some fail
fail_fast: false

# Configure for GitHub Actions
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit hooks

    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_schedule: monthly
  skip: [test-plugin-import, run-our-plugin]  # Skip local hooks in CI
